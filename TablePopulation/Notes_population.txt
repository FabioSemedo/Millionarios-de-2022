*SQLite research
<3   https://www.sqlitetutorial.net/

Data should be cleaned at origin them split into our tables.*

Tables to be populated: original table called "Test"
9   Activities      ☑	
1   Cities          ☑	
2   Industries      ☑	
3   SourcesOfWealth ☑
4   CountryNames    ☑	
5   CountryDetails  ☑
6   States          ☑
7   USCities        ☑
8   Billionaires    ☑

A1  Countries
A2  EconomicDetails
B   Persons (= Billionaires v2)

PLEASE FOLLOW ALONG. See create_[tableName].sql queries for more information on how the tables were populated.

#1 Cities (create_Cities.sql)
    -Atomisation issues
    City,Info       ===>    City
    -----------------------------------
    Krotoszyn,              Krotoszyn
    St. Brelade, Jersey     St. Brelade
    Tawau, Sabah            Tawau
    London, Suffolk         London
    Nakano, Tokyo           Tokyo

    -Format changes
    City        ==>     CITY
    ----------------------------------
    London              London
    ...                 ...

    -Characer encoding errors
    current     ==>     fix      |  Real Name             | Ocurances (assumed 1)
    ----------------------------------
    A CoruÃ±a           A Coruna    (A Coruña)
    KÃ¼snacht           Kussnacht   (Küssnacht)
    GÃ¶teborg           Goteborg    (Göteborg)
    GrÃ¤felfing         Grafelfing  (Gräfelfing)
    Rheda-WiedenbrÃ¼ck  Rheda-Wiedenbruck   (Rheda-Wiedenbrück) x2
    SÃ£o Paulo          Sao Paulo   (São Paulo)                 x3
    FelcsÃºt            Felcsút     (Felcsút)
    Sant'' Elpidio A Mare       Sant'Elpidio a Mare     (Sant'Elpidio a Mare)  

#2 Industries
    -Check character encodin:
    (All good)

    -Check Atomisation:  
    ------------------------------
    Fashion & Retail
    Finance & Investments
    Media & Entertainment
    Food & Beverage
    Gambling & Casinos
    Metals & Mining
    Construction & Engineering
    (Considering how these entries appear, and how the ellements of these cells never appear alone
    , these will be accepted as atomic) 

    Create Industries tbl from distinct industry entries from Test tbl.

#3 SourcesOfWealth (source.txt, parseSource.py, atomised_source_v2.csv)
    Created a new table Billionaires = {personID} X Test
    Queried for (personID, source[]) paires
    Exported result to cvs, atomised the entries with python
    , and saved in cvs format.

    -Atomisation
    original     ==>    current     
    -----------------------------
    Tesla, SpaceX       Tesla
                        SpaceX
    Infrastructure, commodities     Infrastructure
                                    Commodities
    ...                 ...
    
    -Fixed Character encoding errors and unatomised sources (Manual changes)
    original    ==>   fix           |  Real Name    | Ocurances (assumed 1)
    -------------------------------------------
    L'OrÃ©al          L'Oreal       L'Oréal
    EstÃ©e Lauder     Estee Lauder  Estée Lauder    x2
    Casinos/hotels    Casinos       n/a
                      Hotels
    

    Import cvs to a new table Activities.
    Check if number of sources (adjusting for multi source cells)
    , is equal to the number of rows in the Activities tbl. (check_source_count.sql)
    Create SourcesOfWealth tbl from distinct entries from Activities.source
 
#4 CountryNames
    Check for character encoding errors.
    Created CountryNames tbl from the UNION of citizenship and country_of_residence.
    (See create_CountryNames.sql for more)

#9 Activities
    Billionaire.personID, SourcesOfWealth.source ID
    Conjuction (Inner join) of people and sources based on Billionaire.source = SourcesOfWealth.source
    (See create_Activities.sql for more)

#6 States
    Found Inconsistant entries:
    States      region  #Ocurances
    --------------------------------
    California	South	1
    California	Unknown	1
    California	West	176
    Florida	    South	92
    Florida	    Unknown	2
    Illinois	Midwest	22
    Illinois	Unknown	2
    Ohio	    Midwest	6
    Ohio	    Unknown	1
    Texas	    South	69
    Texas	    Unknown	1

    Populated table States based on the most common region per state.
    (See create_States.sql for more)

#7 USCities
    Created this table from the Conjuction of Cities, Test, States table. (inner join)
    (See create_USCitites.sql for more)